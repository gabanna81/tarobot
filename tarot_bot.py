import logging
import csv
import sqlite3
import json
import os
import traceback
import random
import time
import sys
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from openai import OpenAI
from yookassa import Configuration, Payment
import uuid
import httpx
import asyncio
import re
from uuid import uuid4

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    
except ImportError:
    pass

# ‚Üê –≤–æ—Ç –°–Æ–î–ê, –ø–æ—Å–ª–µ try/except, –ë–ï–ó –û–¢–°–¢–£–ü–ê:
BOT_USERNAME = os.getenv("BOT_USERNAME", "nonstoptarot_bot").lstrip("@")
DB_PATH = os.getenv("DB_PATH", "botdata.db")  # –Ω–∞ Render –ø–æ—Å—Ç–∞–≤—å ENV DB_PATH=/data/botdata.db


mask = os.getenv("YOOKASSA_SECRET_KEY") or ""

os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("http_proxy", None)
os.environ.pop("https_proxy", None)


# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π —Ç–∞—Ä–æ
try:
    from tarot_interpretations import TAROT_DAY_INTERPRETATIONS, CONSULTATION_BLOCK
except ImportError:
    TAROT_DAY_INTERPRETATIONS = {}
    CONSULTATION_BLOCK = "üí´ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @nik_Anna_Er"

def normalize_card_key(name: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∫ –∫–ª—é—á–∞–º —Å–ª–æ–≤–∞—Ä—è (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ —Ç–∏–ø–æ–≤—ã–µ —Ñ–æ—Ä–º—ã)."""
    if not name:
        return ""
    s = name.strip().casefold()
    while "  " in s:
        s = s.replace("  ", " ")
    # —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞–¥–µ–∂–µ–π –º–∞—Å—Ç–µ–π
    s = (s
         .replace("–∂–µ–∑–ª—ã", "–∂–µ–∑–ª–æ–≤")
         .replace("–∫—É–±–∫–∏", "–∫—É–±–∫–æ–≤")
         .replace("–ø–µ–Ω—Ç–∞–∫–ª–∏", "–ø–µ–Ω—Ç–∞–∫–ª–µ–π")
         .replace("–º–µ—á–∏", "–º–µ—á–µ–π"))
    # –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã/–≤–∞—Ä–∏–∞–Ω—Ç—ã
    s = (s
         .replace("–¥—É—Ä–∞–∫", "—à—É—Ç")
         .replace("–≤–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–≤–ª—é–±–ª—ë–Ω–Ω—ã–µ"))
    # —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—Ö–æ–¥—è—Ç
    for prefix in ("—Å—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω ", "–∞—Ä–∫–∞–Ω ", "–∫–∞—Ä—Ç–∞ "):
        if s.startswith(prefix):
            s = s[len(prefix):]
    return s


client = OpenAI()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FREE_REQUESTS = 10
MAX_QUESTION_LENGTH = 500
MIN_QUESTION_LENGTH = 3
OPENAI_MAX_TOKENS = 700
API_RETRY_ATTEMPTS = 3
API_RETRY_DELAY = 2

# –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
# –ò–º—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ Telegram (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ .env). –†–∞–∑—Ä–µ—à–∏–º –≤–≤–æ–¥–∏—Ç—å c @, –Ω–æ —É–¥–∞–ª–∏–º –µ–≥–æ.
SUB_CHANNEL_USERNAME = os.getenv("SUB_CHANNEL_USERNAME", "SecretLoveMagic").lstrip("@")

# –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª":
# 1) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º
# 2) –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä—è–º–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —á–µ—Ä–µ–∑ SUB_CHANNEL_LINK
SUB_CHANNEL_LINK = os.getenv("SUB_CHANNEL_LINK") or f"https://t.me/{SUB_CHANNEL_USERNAME}"

SUB_BONUS_AMOUNT = int(os.getenv("SUB_BONUS_AMOUNT", "5"))

PUBLIC_URL = os.getenv("PUBLIC_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://<–∏–º—è-—Å–µ—Ä–≤–∏—Å–∞>.onrender.com


# OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# === OpenAI Chat settings (–Ω–æ–≤—ã–µ) ===
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OPENAI_TEMPERATURE = float(os.getenv("OPENAI_TEMPERATURE", "0.7"))
OPENAI_TIMEOUT = float(os.getenv("OPENAI_TIMEOUT", "30.0"))  # —Å–µ–∫
# OPENAI_MAX_TOKENS —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—Å—Ç–∞–≤—å –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å (700 –∏–ª–∏ 600)




# –ü—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is required")
MAINTENANCE = os.getenv("MAINTENANCE", "0") == "1"
MAINTENANCE_MESSAGE = os.getenv(
    "MAINTENANCE_MESSAGE",
    "üõ† –ò–¥—É—Ç –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ú—ã —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë–º—Å—è!"
)


CHANNEL_ID = "-1002141657943"
TAROLOG_LINK = "https://t.me/nikAnnaEr"

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    'pay10':       {'price': 100.00, 'name': '–î–æ–∫—É–ø–∏—Ç—å 10',      'requests': 10},
    'pay30':       {'price': 190.00, 'name': '–î–æ–∫—É–ø–∏—Ç—å 30',      'requests': 30},
    'pay3_unlim':  {'price': 150.00, 'name': '–ë–µ–∑–ª–∏–º–∏—Ç 3 –¥–Ω—è',   'days': 3},
    'pay14_unlim': {'price': 350.00, 'name': '–ë–µ–∑–ª–∏–º–∏—Ç 2 –Ω–µ–¥–µ–ª–∏','days': 14},
    'pay30_unlim': {'price': 490.00, 'name': '–ë–µ–∑–ª–∏–º–∏—Ç –º–µ—Å—è—Ü',   'days': 30}  # –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
}


WELCOME_TEXT = """üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ! üîÆ

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
üåü –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã  
üìö –ò–∑—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

–ü–µ—Ä–≤—ã–µ 10 –≥–∞–¥–∞–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

üí´ –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: @nik\\_Anna\\_Er"""

# YooKassa –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
Configuration.account_id = os.getenv('YOOKASSA_ACCOUNT_ID')
Configuration.secret_key = os.getenv('YOOKASSA_SECRET_KEY')

def check_openai_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API"""
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        logger.error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    if not api_key.startswith('sk-'):
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç OPENAI_API_KEY!")
        return False
    logger.info("OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    return True

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with get_db_connection() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ—Ç)
            conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    request_count INTEGER DEFAULT 0,
                    is_subscribed BOOLEAN DEFAULT FALSE,
                    is_banned BOOLEAN DEFAULT FALSE,
                    join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    paid_requests INTEGER DEFAULT 0,
                    last_payment_id TEXT,
                    subscription_end TEXT,
                    referrer_id INTEGER,
                    bonus_requests INTEGER DEFAULT 0
                )
            ''')
    
            # üîπ –ú–∏–≥—Ä–∞—Ü–∏—è: —Ñ–ª–∞–∂–æ–∫ "–±–æ–Ω—É—Å –∑–∞ –∫–∞–Ω–∞–ª —É–∂–µ –≤—ã–¥–∞–Ω" (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
            try:
                conn.execute("ALTER TABLE users ADD COLUMN got_secretlovemagic INTEGER DEFAULT 0")
            except sqlite3.OperationalError:
                # –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
                pass
    
            # –ò–Ω–¥–µ–∫—Å—ã
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id)")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_subscription_end ON users(subscription_end)")
            
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


def maintenance_block(user_id: int) -> bool:
    return MAINTENANCE and user_id != ADMIN_ID


def get_db_connection():
    conn = sqlite3.connect(DB_PATH, timeout=15, isolation_level=None)
    # –í–∫–ª—é—á–∞–µ–º WAL –∏ —Ç–∞–π–º–∞—É—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ SQLite
    conn.execute("PRAGMA journal_mode=WAL;")
    conn.execute("PRAGMA busy_timeout=15000;")
    conn.row_factory = sqlite3.Row
    return conn



def get_user(user_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return cursor.fetchone()

def update_user(user_id, username=None, increment_count=False):
    with get_db_connection() as conn:
        if username:
            conn.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        if increment_count:
            conn.execute("UPDATE users SET request_count = request_count + 1 WHERE user_id = ?", (user_id,))

def register_user(user_id, username=None, first_name=None, last_name=None, referrer_id=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        conn.execute("""
            INSERT OR IGNORE INTO users (user_id, username, referrer_id) 
            VALUES (?, ?, ?)
        """, (user_id, username, referrer_id))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        if referrer_id and referrer_id != user_id:
            conn.execute("""
                UPDATE users SET bonus_requests = bonus_requests + 5 
                WHERE user_id = ?
            """, (referrer_id,))
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ 5 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id}")

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user(user_id)
    if not user:
        return None
    
    # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    free_requests = max(0, MAX_FREE_REQUESTS - user['request_count'])
    paid_requests = user['paid_requests'] or 0
    bonus_requests = user['bonus_requests'] or 0
    
    return {
        'user_id': user['user_id'],
        'username': user['username'],
        'is_subscribed': user['is_subscribed'],
        'is_banned': user['is_banned'],
        'subscription_end': user['subscription_end'],
        'free_requests': free_requests,
        'paid_requests': paid_requests,
        'bonus_requests': bonus_requests,
        'total_requests': free_requests + paid_requests + bonus_requests
    }

from datetime import datetime

def is_subscription_active(user_id, subscription_end_str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, '%Y-%m-%d %H:%M:%S'). –ë–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î."""
    if not subscription_end_str:
        return False
    try:
        sub_end_date = datetime.strptime(subscription_end_str, '%Y-%m-%d %H:%M:%S')
    except ValueError:
        return False
    return datetime.now() < sub_end_date

def expire_if_needed(user_id: int, subscription_end_str: str | None) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ë–î, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (True/False).
    """
    active = is_subscription_active(user_id, subscription_end_str)
    if not active:
        with get_db_connection() as conn:
            conn.execute(
                "UPDATE users SET is_subscribed = 0, subscription_end = NULL WHERE user_id = ?",
                (user_id,)
            )
    return active


def save_user_id(user_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not os.path.exists('user_ids.txt'):
        open('user_ids.txt', 'w').close()
    
    with open('user_ids.txt', 'r') as file:
        existing_ids = file.read().splitlines()
    
    if str(user_id) not in existing_ids:
        with open('user_ids.txt', 'a') as file:
            file.write(f"{user_id}\n")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

def can_make_request(user_data, user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
    if user_id == ADMIN_ID or user_data['is_subscribed']:
        return True
    
    free_remaining = max(0, MAX_FREE_REQUESTS - user_data['request_count'])
    paid_requests = user_data['paid_requests'] or 0
    bonus_requests = user_data['bonus_requests'] or 0
    
    return (free_remaining + paid_requests + bonus_requests) > 0

def get_all_user_ids() -> list[int]:
    with get_db_connection() as conn:
        rows = conn.execute("SELECT user_id FROM users").fetchall()
        return [int(r["user_id"]) for r in rows if r["user_id"] is not None]


async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # —Ç–µ–∫—Å—Ç –±–µ—Ä—ë–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    text = " ".join(context.args) if context.args else ""
    if not text.strip():
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    user_ids = get_all_user_ids()
    ok = fail = 0
    # –º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã
    for uid in user_ids:
        try:
            await context.bot.sendMessage(chat_id=uid, text=text, disable_web_page_preview=True)
            ok += 1
        except Exception:
            fail += 1
        await asyncio.sleep(0.05)  # ‚âà20 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. ‚úÖ {ok} | ‚ùå {fail} | –í—Å–µ–≥–æ: {len(user_ids)}")


async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"ALL_HANDLER update: {update}")
    if getattr(update.message, 'web_app_data', None):
        logger.info(f"web_app_data: {update.message.web_app_data.data}")
    if getattr(update, 'callback_query', None):
        logger.info(f"callback_query: {update.callback_query}")



async def deduct_user_request(user_id: int) -> str | None:
    if user_id == ADMIN_ID:
        return "admin"

    u = get_user(user_id)
    if not u:
        return None

    # –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞?
    is_sub = bool(u["is_subscribed"] or 0)
    sub_end = u["subscription_end"]
    if is_sub and expire_if_needed(u["user_id"], sub_end):
        return "sub"

    free_remaining = max(0, MAX_FREE_REQUESTS - (u["request_count"] or 0))
    bonus_requests = u["bonus_requests"] or 0
    paid_requests  = u["paid_requests"] or 0

    with get_db_connection() as conn:
        if free_remaining > 0:
            conn.execute("UPDATE users SET request_count = request_count + 1 WHERE user_id = ?", (user_id,))
            return "free"
        if bonus_requests > 0:
            conn.execute("UPDATE users SET bonus_requests = bonus_requests - 1 WHERE user_id = ?", (user_id,))
            return "bonus"
        if paid_requests > 0:
            conn.execute("UPDATE users SET paid_requests = paid_requests - 1 WHERE user_id = ?", (user_id,))
            return "paid"
    return None



async def refund_user_request(user_id: int, bucket: str | None):
    if bucket in (None, "admin", "sub"):
        return
    with get_db_connection() as conn:
        if bucket == "free":
            conn.execute(
                "UPDATE users SET request_count = CASE WHEN request_count>0 THEN request_count-1 ELSE 0 END WHERE user_id = ?",
                (user_id,)
            )
        elif bucket == "bonus":
            conn.execute(
                "UPDATE users SET bonus_requests = COALESCE(bonus_requests,0) + 1 WHERE user_id = ?",
                (user_id,)
            )
        elif bucket == "paid":
            conn.execute(
                "UPDATE users SET paid_requests = COALESCE(paid_requests,0) + 1 WHERE user_id = ?",
                (user_id,)
            )




def log_request(user_id, username, question, cards):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ CSV"""
    try:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cards_str = ', '.join(cards) if isinstance(cards, list) else str(cards)
        
        file_exists = os.path.isfile('user_requests.csv')
        with open('user_requests.csv', 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow(['timestamp', 'user_id', 'username', 'question', 'cards'])
            writer.writerow([timestamp, user_id, username, question, cards_str])
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥: {user_id} - {question[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

def build_ref_link(user_id: int, bot_username: str) -> str:
    # username –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ 'MyBot' –∏–ª–∏ '@MyBot' ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    bot_username = bot_username.lstrip('@')
    return f"https://t.me/{bot_username}?start=ref_{user_id}"


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üåü –ö–∞—Ä—Ç–∞ –¥–Ω—è")],
        [KeyboardButton("üìö –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã"),KeyboardButton("üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton("üéÅ +5 –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),KeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")],
        [KeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")],
    ], resize_keyboard=True)


def ready_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíï –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="category_love")],
        [InlineKeyboardButton("üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã", callback_data="category_career")], 
        [InlineKeyboardButton("üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", callback_data="category_growth")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def love_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –ª—é–±–æ–≤—å"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≠ –ß—Ç–æ –æ–Ω/–æ–Ω–∞ –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?", callback_data="spread_love_thoughts")],
        [InlineKeyboardButton("üîÆ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π", callback_data="spread_love_prospects")],
        [InlineKeyboardButton("üëª –ü–æ—á–µ–º—É –æ–Ω/–æ–Ω–∞ –∏—Å—á–µ–∑?", callback_data="spread_love_disappeared")],
        [InlineKeyboardButton("ü™û –ó–µ—Ä–∫–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π", callback_data="spread_love_mirror")],
        [InlineKeyboardButton("‚ùì –°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è?", callback_data="spread_love_continue")],
        [InlineKeyboardButton("‚ú® –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å –ª—é–±–æ–≤—å?", callback_data="spread_love_attract")],
        [InlineKeyboardButton("üíî –ö–∞–∫ –ø–µ—Ä–µ–∂–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ", callback_data="spread_love_breakup")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")]
    ])

def career_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíº –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ", callback_data="spread_career_prospects")],
        [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ", callback_data="spread_career_money")],
        [InlineKeyboardButton("üéØ –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data="spread_career_choice")],
        [InlineKeyboardButton("üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç", callback_data="spread_career_growth")],
        [InlineKeyboardButton("ü§ù –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏", callback_data="spread_career_colleagues")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")]
    ])

def growth_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéØ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏", callback_data="spread_growth_goals")],
        [InlineKeyboardButton("üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="spread_growth_changes")],
        [InlineKeyboardButton("üåü –¢–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="spread_growth_talents")],
        [InlineKeyboardButton("‚öñÔ∏è –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏", callback_data="spread_growth_karma")],
        [InlineKeyboardButton("üßò –î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="spread_growth_spiritual")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")]
    ])

def subscription_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé –î–æ–∫—É–ø–∏—Ç—å 10 ‚Äî 100‚ÇΩ", callback_data="pay10")],
        [InlineKeyboardButton("‚ú® –î–æ–∫—É–ø–∏—Ç—å 30 ‚Äî 190‚ÇΩ", callback_data="pay30")],
        [InlineKeyboardButton("üåü –ë–µ–∑–ª–∏–º–∏—Ç 3 –¥–Ω—è ‚Äî 150‚ÇΩ", callback_data="pay3_unlim")],
        [InlineKeyboardButton("üí´ –ë–µ–∑–ª–∏–º–∏—Ç 2 –Ω–µ–¥–µ–ª–∏ ‚Äî 350‚ÇΩ", callback_data="pay14_unlim")],
        [InlineKeyboardButton("üî• –ë–µ–∑–ª–∏–º–∏—Ç –º–µ—Å—è—Ü ‚Äî 490‚ÇΩ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)", callback_data="pay30_unlim")]
    ])


# –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
READY_SPREADS = {
    # –õ—é–±–æ–≤—å
    "spread_love_thoughts": {
        "title": "üí≠ –ß—Ç–æ –æ–Ω/–æ–Ω–∞ –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?",
        "description": "–†–∞—Å–∫–ª–∞–¥ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫–∞",
        "positions": ["–ï–≥–æ/–µ—ë –º—ã—Å–ª–∏ –æ –≤–∞—Å", "–°–∫—Ä—ã—Ç—ã–µ —á—É–≤—Å—Ç–≤–∞", "–ß—Ç–æ –º–µ—à–∞–µ—Ç —Å–±–ª–∏–∂–µ–Ω–∏—é"]
    },
    "spread_love_prospects": {
        "title": "üîÆ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π", 
        "description": "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥–µ—Ç –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º",
        "positions": ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥ –æ—Ç–Ω–æ—à–µ–Ω–∏–π"]
    },
    "spread_love_disappeared": {
        "title": "üëª –ü–æ—á–µ–º—É –æ–Ω/–æ–Ω–∞ –∏—Å—á–µ–∑?",
        "description": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
        "positions": ["–ò—Å—Ç–∏–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞", "–ï–≥–æ/–µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–°—Ç–æ–∏—Ç –ª–∏ –∂–¥–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è"]
    },
    "spread_love_mirror": {
        "title": "ü™û –ó–µ—Ä–∫–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "description": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "positions": ["–í–∞—à –≤–∫–ª–∞–¥ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–í–∫–ª–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞", "–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"]
    },
    "spread_love_continue": {
        "title": "‚ùì –°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è?",
        "description": "–ü–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ –±—É–¥—É—â–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "positions": ["–ü–ª—é—Å—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", "–ú–∏–Ω—É—Å—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", "–°–æ–≤–µ—Ç –∫–∞—Ä—Ç"]
    },
    "spread_love_attract": {
        "title": "‚ú® –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å –ª—é–±–æ–≤—å?",
        "description": "–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –Ω–æ–≤–æ–π –ª—é–±–≤–∏ –≤ –≤–∞—à—É –∂–∏–∑–Ω—å",
        "positions": ["–ß—Ç–æ –º–µ—à–∞–µ—Ç –ª—é–±–≤–∏", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å", "–ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"]
    },
    "spread_love_breakup": {
        "title": "üíî –ö–∞–∫ –ø–µ—Ä–µ–∂–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ",
        "description": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ç—Ä—É–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è",
        "positions": ["–ü—Ä–∏—á–∏–Ω–∞ –±–æ–ª–∏", "–£—Ä–æ–∫ —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è", "–ü—É—Ç—å –∫ –∏—Å—Ü–µ–ª–µ–Ω–∏—é"]
    },
    
    # –ö–∞—Ä—å–µ—Ä–∞
    "spread_career_prospects": {
        "title": "üíº –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ",
        "description": "–í–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã",
        "positions": ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–°–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
    },
    "spread_career_money": {
        "title": "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ",
        "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "positions": ["–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ü—É—Ç—å –∫ –∏–∑–æ–±–∏–ª–∏—é"]
    },
    "spread_career_choice": {
        "title": "üéØ –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        "description": "–ü–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º",
        "positions": ["–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–ü–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ñ–µ—Ä–∞", "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏"]
    },
    "spread_career_growth": {
        "title": "üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
        "description": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è",
        "positions": ["–¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏", "–ß—Ç–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞"]
    },
    "spread_career_colleagues": {
        "title": "ü§ù –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏",
        "description": "–£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "positions": ["–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ", "–í–∞—à–∞ —Ä–æ–ª—å", "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
    },
    
    # –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç
    "spread_growth_goals": {
        "title": "üéØ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏",
        "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π",
        "positions": ["–ò—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ü—É—Ç—å –∫ —Ü–µ–ª–∏"]
    },
    "spread_growth_changes": {
        "title": "üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        "description": "–ü—Ä–æ—Ü–µ—Å—Å –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "positions": ["–ß—Ç–æ —É—Ö–æ–¥–∏—Ç", "–ß—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç", "–ö–∞–∫ –ø—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"]
    },
    "spread_growth_talents": {
        "title": "üåü –¢–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
        "description": "–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤",
        "positions": ["–°–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç", "–ö–∞–∫ —Ä–∞–∑–≤–∏—Ç—å", "–ì–¥–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å"]
    },
    "spread_growth_karma": {
        "title": "‚öñÔ∏è –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
        "description": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤",
        "positions": ["–ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞", "–£—Ä–æ–∫ –¥–ª—è –¥—É—à–∏", "–ü—É—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"]
    },
    "spread_growth_spiritual": {
        "title": "üßò –î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        "description": "–î—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        "positions": ["–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å", "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", "–î—É—Ö–æ–≤–Ω–∞—è —Ü–µ–ª—å"]
    }
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
async def get_tarot_reading(prompt: str) -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.
    –ö–ª—é—á –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY (–Ω–∏–≥–¥–µ –≤ –∫–æ–¥–µ –Ω–µ –Ω—É–∂–µ–Ω).
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI: prompt={prompt[:120]}...")

    model_name = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ .env –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    system_prompt = (
        "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç —Ç–∞—Ä–æ. "
        "1. –ù–∞—á–∏–Ω–∞–π —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
        "2. –ò—Å–ø–æ–ª—å–∑—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. 3. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. "
        "4. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, –Ω–æ —á–µ—Å—Ç–Ω—ã–º. 3-4 –∞–±–∑–∞—Ü–∞ –º–∞–∫—Å–∏–º—É–º. "
        "5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ –≤ –∫–æ–Ω—Ü–µ. –ü–∏—à–∏ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Ü–∞. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ '–í—ã'. "
        "6. –ù—É–º–µ—Ä—É–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –º–µ—Å—Ç—É –≤ —Ä–∞—Å–∫–ª–∞–¥–µ: '–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ ‚Äî ...', '–í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ ‚Äî ...', '–¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞ ‚Äî ...'. "
        "   –ù–µ –ø—É—Ç–∞–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ß–µ—Ç–≤–µ—Ä–∫–∞ –º–µ—á–µ–π' ‚Äî —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, –∞ –Ω–µ —á–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è). "
        "7. –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ-—Ä—É—Å—Å–∫–∏: –¢—É–∑, –î–≤–æ–π–∫–∞, –¢—Ä–æ–π–∫–∞, –ß–µ—Ç–≤–µ—Ä–∫–∞, –ü—è—Ç–µ—Ä–∫–∞, –®–µ—Å—Ç–µ—Ä–∫–∞, –°–µ–º–µ—Ä–∫–∞, –í–æ—Å—å–º–µ—Ä–∫–∞, –î–µ–≤—è—Ç–∫–∞, –î–µ—Å—è—Ç–∫–∞, "
        "   –ü–∞–∂, –†—ã—Ü–∞—Ä—å, –ö–æ—Ä–æ–ª–µ–≤–∞, –ö–æ—Ä–æ–ª—å; –º–∞—Å—Ç–∏ ‚Äî –∂–µ–∑–ª–æ–≤, –∫—É–±–∫–æ–≤, –º–µ—á–µ–π, –ø–µ–Ω—Ç–∞–∫–ª–µ–π. –ü–∏—à–∏: '–ß–µ—Ç–≤–µ—Ä–∫–∞ –º–µ—á–µ–π' (–Ω–µ '—á–µ—Ç—ã—Ä–µ –º–µ—á–µ–π'). "
        "8. –°—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã –Ω–∞–∑—ã–≤–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ: –ú–∞–≥, –ñ—Ä–∏—Ü–∞, –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞, –ò–º–ø–µ—Ä–∞—Ç–æ—Ä, –ò–µ—Ä–æ—Ñ–∞–Ω—Ç, –í–ª—é–±–ª–µ–Ω–Ω—ã–µ, –ö–æ–ª–µ—Å–Ω–∏—Ü–∞, –°–∏–ª–∞, –û—Ç—à–µ–ª—å–Ω–∏–∫, "
        "   –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã, –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å, –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π, –°–º–µ—Ä—Ç—å, –£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –î—å—è–≤–æ–ª, –ë–∞—à–Ω—è, –ó–≤–µ–∑–¥–∞, –õ—É–Ω–∞, –°–æ–ª–Ω—Ü–µ, –°—É–¥, –ú–∏—Ä. "
        "9. –í —Ç–µ–∫—Å—Ç–µ –Ω–µ —Å–º–µ—à–∏–≤–∞–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã."
    )


    last_error = None
    for attempt in range(API_RETRY_ATTEMPTS):
        try:
            client = OpenAI()  # –∫–ª—é—á –≤–æ–∑—å–º—ë—Ç—Å—è –∏–∑ OPENAI_API_KEY
            response = client.chat.completions.create(
                model=model_name,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=OPENAI_MAX_TOKENS,
                temperature=0.7
            )
            result = (response.choices[0].message.content or "").strip()
            finish_reason = getattr(response.choices[0], "finish_reason", "n/a")
            logger.info(f"OpenAI finish_reason={finish_reason}, len={len(result)}")

            if not result:
                raise RuntimeError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

            return result

        except Exception as e:
            last_error = e
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{API_RETRY_ATTEMPTS}): {e}")
            if attempt < API_RETRY_ATTEMPTS - 1:
                await asyncio.sleep(API_RETRY_DELAY * (attempt + 1))

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —É–ø–∞–ª–∏ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    raise last_error if last_error else RuntimeError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI")






# –í–∞–ª–∏–¥–∞—Ü–∏—è
def is_valid_question(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞"""
    if not text:
        return False, "–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    
    if len(text) < MIN_QUESTION_LENGTH:
        return False, f"–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º {MIN_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–∞."
    
    if len(text) > MAX_QUESTION_LENGTH:
        return False, f"–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
    
    return True, ""

def is_valid_cards(cards):
    if not isinstance(cards, list) or not cards:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç."
    if len(cards) != 3:
        return False, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–æ–≤–Ω–æ 3 –∫–∞—Ä—Ç—ã."
    return True, ""

# –•–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def reply_chunked(message, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏."""
    limit = 3800  # –∑–∞–ø–∞—Å –ø–æ–¥ Markdown/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if len(text) <= limit:
        await message.reply_text(text, **kwargs)
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –µ—ë —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    keyboard_kwargs = kwargs.copy()
    kwargs.pop('reply_markup', None)
    
    for i in range(0, len(text), limit):
        chunk = text[i:i+limit]
        is_last_chunk = (i + limit) >= len(text)
        
        current_kwargs = keyboard_kwargs if is_last_chunk else kwargs
        await message.reply_text(chunk, **current_kwargs)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    # === MAINTENANCE GUARD ===
    if maintenance_block(user.id):
        await update.message.reply_text(MAINTENANCE_MESSAGE, reply_markup=main_keyboard())
        return
    # =========================
    args = context.args

    # –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –ÆKassa: /start pay_<order_id>
    from yookassa import Payment

    # –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ YooKassa: /start pay_<order_id>
    if args and args[0].startswith("pay_"):
        order_id = args[0][4:]
        try:
            with sqlite3.connect('botdata.db', timeout=15) as conn:
                conn.row_factory = sqlite3.Row
                conn.execute("PRAGMA journal_mode=WAL;")
                conn.execute("PRAGMA busy_timeout=15000;")

                pid_row = conn.execute(
                    "SELECT payment_id FROM payment_links WHERE order_id = ?",
                    (order_id,)
                ).fetchone()

                row = None
                if pid_row:
                    payment_id = pid_row["payment_id"]
                    row = conn.execute(
                        "SELECT user_id, tariff FROM payments WHERE payment_id = ?",
                        (payment_id,)
                    ).fetchone()

            if pid_row and row:
                p = Payment.find_one(payment_id)
                status = getattr(p, "status", None)
                if getattr(p, "paid", False) or status == "succeeded":
                    activate_subscription(
                        user_id=row["user_id"],
                        tariff_key=row["tariff"],
                        payment_id=payment_id
                    )

                    u = get_user(row["user_id"]) or {}

                    tariff = TARIFFS.get(row["tariff"], {})
                    added = tariff.get("requests") or tariff.get("days")
                    kind = "–≥–∞–¥–∞–Ω–∏–π" if "requests" in tariff else "–¥–Ω–µ–π –±–µ–∑–ª–∏–º–∏—Ç–∞"

                    info_lines = [
                        "üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                        f"‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–æ: {added} {kind}."
                    ]
                    if u:
                        info_lines.append(
                            f"üìä –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ: –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö {max(0, MAX_FREE_REQUESTS - (u['request_count'] or 0))}, "
                            f"–ø–ª–∞—Ç–Ω—ã—Ö {u['paid_requests'] or 0}, –±–æ–Ω—É—Å–Ω—ã—Ö {u['bonus_requests'] or 0}."
                        )

                    await update.message.reply_text("\n".join(info_lines), reply_markup=main_keyboard())
                else:
                    await update.message.reply_text(
                        "‚åõ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.",
                        reply_markup=main_keyboard()
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=main_keyboard()
                )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã order_id={order_id}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_keyboard()
            )
        return


   


    # —Ä–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ /start ref_...
    referrer_id = None
    if args and args[0].startswith('ref_'):
        try:
            referrer_id = int(args[0].replace('ref_', ''))
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")
        except ValueError:
            referrer_id = None

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register_user(user.id, user.username, user.first_name, user.last_name, referrer_id)

    # –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ-—Å—Å—ã–ª–∫–µ)
    if referrer_id and referrer_id != user.id:
        try:
            with get_db_connection() as conn:
                row = conn.execute(
                    "SELECT referrer_id FROM users WHERE user_id = ?",
                    (user.id,)
                ).fetchone()

                if row and not row["referrer_id"]:
                    # –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    conn.execute(
                        "UPDATE users SET referrer_id = ? WHERE user_id = ?",
                        (referrer_id, user.id)
                    )
                    # –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (+5 –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
                    conn.execute(
                        "UPDATE users SET bonus_requests = COALESCE(bonus_requests, 0) + 5 WHERE user_id = ?",
                        (referrer_id,)
                    )
                    conn.commit()

                    # –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                    try:
                        await context.bot.send_message(
                            referrer_id,
                            "üéâ –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É! +5 –≥–∞–¥–∞–Ω–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–æ."
                        )
                    except Exception:
                        pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=main_keyboard(),
        parse_mode="Markdown",
    )

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –∑–∞–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with get_db_connection() as conn:
        row = conn.execute(
            "SELECT last_payment_id FROM users WHERE user_id = ?",
            (user_id,)
        ).fetchone()
    payment_id = row["last_payment_id"] if row else None

    if not payment_id:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=main_keyboard()
        )
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ YooKassa
    from yookassa import Payment
    p = Payment.find_one(payment_id)
    status = getattr(p, "status", None)
    paid = bool(getattr(p, "paid", False)) or status == "succeeded"

    if not paid:
        await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status or '–æ–∂–∏–¥–∞–µ—Ç—Å—è'}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            reply_markup=main_keyboard()
        )
        return

    # –Ω–∞–π–¥—ë–º —Ç–∞—Ä–∏—Ñ –ø–æ –ø–ª–∞—Ç–µ–∂—É
    with get_db_connection() as conn:
        pay = conn.execute(
            "SELECT tariff, status FROM payments WHERE payment_id = ?",
            (payment_id,)
        ).fetchone()

    # –µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if pay and (pay["status"] == "succeeded"):
        u = get_user(user_id)
        info_lines = ["‚úî –û–ø–ª–∞—Ç–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."]
    else:
        # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ–π—á–∞—Å
        tariff_key = pay["tariff"] if pay else None
        if tariff_key:
            activate_subscription(user_id, tariff_key, payment_id)
        u = get_user(user_id)
        info_lines = ["üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."]

    # –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ
    try:
        tariff_key = pay["tariff"] if pay else None
        tariff = TARIFFS.get(tariff_key)
        if tariff and ("requests" in tariff):
            added = int(tariff["requests"])
            balance = int(u["paid_requests"] or 0) if u else 0
            info_lines.append(f"‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–æ: {added} –ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π.")
            info_lines.append(f"üíº –ë–∞–ª–∞–Ω—Å –ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π: {balance}.")
        elif tariff and ("days" in tariff):
            until = (u["subscription_end"] or "") if u else ""
            info_lines.append(f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {until}.")
    except Exception:
        pass

    await update.message.reply_text("\n".join(info_lines), reply_markup=main_keyboard())


async def handle_card_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä—Ç—ã –¥–Ω—è"""
    context.user_data['is_card_of_day'] = True
    context.user_data['question'] = '–ö–∞—Ä—Ç–∞ –¥–Ω—è'

    await update.message.reply_text(
        "üåü *–ö–∞—Ä—Ç–∞ –¥–Ω—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è", 
                        web_app=WebAppInfo(url="https://gabanna81.github.io/taro-daily/"))]
        ], resize_keyboard=True),
        parse_mode='Markdown'
    )

async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_data = get_user_data(update.effective_user.id)
    if not user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    free_requests = user_data['free_requests']
    paid_requests = user_data['paid_requests']
    bonus_requests = user_data['bonus_requests']
    subscription_end = user_data['subscription_end']
    
    status_text = f"üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å:**\n\n"
    status_text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π: {free_requests}\n"
    status_text += f"üíé –ü–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π: {paid_requests}\n"
    status_text += f"üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π: {bonus_requests}\n"
    
    if subscription_end and is_subscription_active(update.effective_user.id, subscription_end):
        end_date = datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
        status_text += f"‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
    else:
        status_text += "üìÖ –ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç\n"
    
    status_text += "\nüí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:**"
    
    await update.message.reply_text(
        status_text,
        reply_markup=subscription_keyboard(),
        parse_mode='Markdown'
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

üîÆ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ üåü –ö–∞—Ä—Ç–∞ –¥–Ω—è - –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É-—Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å
‚Ä¢ üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ 3 –∫–∞—Ä—Ç—ã
‚Ä¢ üìö –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç
‚Ä¢ –ü–µ—Ä–≤—ã–µ 10 –≥–∞–¥–∞–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @nik\\_Anna\\_Er

üåü **–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ:**
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π"""

    await update.message.reply_text(help_text, parse_mode='Markdown')

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ tarot_bot.py
async def process_cards(update: Update, context: ContextTypes.DEFAULT_TYPE, cards: list):
    user = update.effective_user

    # 1) –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç
    is_valid, error_message = is_valid_cards(cards)
    if not is_valid:
        await update.message.reply_text(f"‚ùå {error_message}", reply_markup=main_keyboard())
        context.user_data.clear()
        return

    # 2) –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º "—á–µ–∫"
    bucket = await deduct_user_request(user.id)
    if not bucket:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç ‚¨áÔ∏è",
            reply_markup=subscription_keyboard()
        )
        return

    # 3) –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    processing_message = await update.message.reply_text("üîÆ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∫–∞—Ä—Ç—ã...")

    try:
        # 4) –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥)
        question = context.user_data.get('question') or "–í–æ–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
        spread_positions = context.user_data.get('spread_positions')

        if spread_positions:
            position_descriptions = [
                f"{i}. {pos}: {card}" for i, (pos, card) in enumerate(zip(spread_positions, cards), 1)
            ]
            prompt = (
                f"–í–æ–ø—Ä–æ—Å: {question}\n"
                f"–ö–∞—Ä—Ç—ã: {', '.join(cards)}.\n"
                f"–ü–æ–∑–∏—Ü–∏–∏: {'; '.join(position_descriptions)}.\n"
                f"–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞."
            )
        else:
            position_descriptions = [
                f"1. –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞: {cards[0]}",
                f"2. –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞: {cards[1]}",
                f"3. –¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞: {cards[2]}",
            ]
            prompt = (
                f"–í–æ–ø—Ä–æ—Å: {question}\n"
                f"–ö–∞—Ä—Ç—ã: {', '.join(cards)}.\n"
                f"–ü–æ–∑–∏—Ü–∏–∏: {'; '.join(position_descriptions)}.\n"
                f"–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞."
            )


        interpretation = await get_tarot_reading(prompt)
        final_text = f"{interpretation}\n\n{CONSULTATION_BLOCK}"

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        log_request(user.id, user.username, question, cards)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ (–µ—Å–ª–∏ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –º–æ–ª—á–∏–º)
        try:
            await processing_message.delete()
        except Exception:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(final_text, reply_markup=main_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")

        # –í–ê–ñ–ù–û: —Ä–µ—Ñ–∞–Ω–¥ –ø–æ "—á–µ–∫—É"
        try:
            await refund_user_request(user.id, bucket)
        except Exception as refund_err:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ñ–∞–Ω–¥–∞: {refund_err}")

        error_code = f"API-{hash(str(e)) % 100000:05d}"
        try:
            await processing_message.delete()
        except Exception:
            pass
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∫–∞—Ä—Ç. –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –≤–æ–∑–≤—Ä–∞—â—ë–Ω.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –∫–æ–¥–æ–º: {error_code}",
            reply_markup=main_keyboard()
        )
    finally:
        context.user_data.clear()

    
async def process_card_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE, card: str):
    """–ö–∞—Ä—Ç–∞ –¥–Ω—è ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ TAROT_DAY_INTERPRETATIONS. API –ù–ï –≤—ã–∑—ã–≤–∞–µ–º."""
    user = update.effective_user
    processing_message = await update.message.reply_text("üÉè –¢—è–Ω—É —ç–Ω–µ—Ä–≥–∏—é –¥–Ω—è...")

    try:
        key = normalize_card_key(card)
        base = TAROT_DAY_INTERPRETATIONS.get(key)

        if not base:
            # –æ—Ñ–ª–∞–π–Ω-—Ñ–æ–ª–±—ç–∫: –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –±–µ–∑ –≤—ã–∑–æ–≤–∞ OpenAI
            base = (f"üìù –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ¬´{card}¬ª –ø–æ–∫–∞ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ. "
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ ‚Äî –¥–æ–±–∞–≤–ª—é –æ–ø–∏—Å–∞–Ω–∏–µ.")

        text = f"{base}\n\n{CONSULTATION_BLOCK}"

        try:
            await processing_message.delete()
        except Exception:
            pass

        await update.message.reply_text(text, reply_markup=main_keyboard())
        log_request(user.id, user.username, "–ö–∞—Ä—Ç–∞ –¥–Ω—è", [card])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è: {e}")
        try:
            await processing_message.delete()
        except Exception:
            pass
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è.",
            reply_markup=main_keyboard()
        )
    finally:
        context.user_data.clear()

    

async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # === MAINTENANCE GUARD ===
    if maintenance_block(user.id):
        await update.message.reply_text(MAINTENANCE_MESSAGE, reply_markup=main_keyboard())
        context.user_data.clear()
        return
    # =========================
    try:
        data = json.loads(update.effective_message.web_app_data.data)
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_keyboard())
        context.user_data.clear()
        return

    try:
        cards = data.get('cards', [])
        if not cards:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_keyboard())
            return

        user = update.effective_user
        user_db_data = get_user_data(user.id)
        if not user_db_data:
            register_user(user.id, user.username, user.first_name, user.last_name)
            user_db_data = get_user_data(user.id)

        # —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–Ω ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ –≤ –ë–î
        if user_db_data.get('is_banned'):
            await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_keyboard())
            return

        if context.user_data.get('is_card_of_day'):
            await process_card_of_day(update, context, cards[0])
        else:
            await process_cards(update, context, cards)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_keyboard())
    finally:
        context.user_data.clear()




async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    # === MAINTENANCE GUARD ===
    if maintenance_block(update.effective_user.id):
        await query.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
        await query.message.reply_text(MAINTENANCE_MESSAGE, reply_markup=main_keyboard())
        return
    # =========================
    await query.answer()
    
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    
    if data == "category_love":
        await query.edit_message_text(
            "üíï **–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞—Å–∫–ª–∞–¥:",
            reply_markup=love_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "show_ref_text":
        bot_username = (context.bot.username or "").lstrip("@")
        link = build_ref_link(update.effective_user.id, bot_username)
        await query.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
        await query.message.reply_text(link, disable_web_page_preview=True)
        return
    
    elif data == "category_career":
        await query.edit_message_text(
            "üíº **–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –∫–∞—Ä—å–µ—Ä—É –∏ —Ñ–∏–Ω–∞–Ω—Å—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞—Å–∫–ª–∞–¥:",
            reply_markup=career_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "check_sub_secretlovemagic":
        await check_sub_bonus(update, context)
        return

    
    elif data == "category_growth":
        await query.edit_message_text(
            "üå± **–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞—Å–∫–ª–∞–¥:",
            reply_markup=growth_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "back_categories":
        await query.edit_message_text(
            "üîÆ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏—è:**\n\n"
            "üíï –õ—é–±–æ–≤—å - –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞, —Ä–æ–º–∞–Ω—Ç–∏–∫–∞\n"
            "üíº –ö–∞—Ä—å–µ—Ä–∞ - —Ä–∞–±–æ—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è\n" 
            "üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç - —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å",
            reply_markup=ready_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "back_main":
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —É–∂–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –º–æ–ª—á–∏–º)
        try:
            await query.edit_message_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†")
        except Exception:
            pass
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å ReplyKeyboard
        await query.message.reply_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_keyboard())
        return

    elif data in READY_SPREADS:
        await handle_ready_spread(update, context, data)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    elif data.startswith("pay"):
        await process_payment(update, context)
        

async def handle_ready_spread(update: Update, context: ContextTypes.DEFAULT_TYPE, spread_key: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (—á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é ReplyKeyboard —Å webapp)"""
    logger.info(f"=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê handle_ready_spread {spread_key} ===")
    query = update.callback_query

    if spread_key not in READY_SPREADS:
        await query.edit_message_text("‚ùå –†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    spread = READY_SPREADS[spread_key]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å + –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    context.user_data['question'] = spread['title']
    context.user_data['spread_positions'] = spread['positions']
    context.user_data['state'] = 'awaiting_cards'

    logger.info(f"–°–û–•–†–ê–ù–ò–õ–ò –≤ context.user_data: {dict(context.user_data)}")

    # 1. –û–ø–æ–≤–µ—â–∞–µ–º –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ (–∑–∞–º–µ–Ω—è–µ—Ç edit_message_text)
    await query.edit_message_text(
        f"üîÆ *–í—ã–±—Ä–∞–Ω —Ä–∞—Å–∫–ª–∞–¥:*\n"
        f"{spread['title']}\n\n"
        f"üìù {spread['description']}",
        parse_mode='Markdown'
    )

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π WebApp (ReplyKeyboard)
    await query.message.reply_text(
        f"üÉè *–ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞:*\n"
        f"1Ô∏è‚É£ {spread['positions'][0]}\n"
        f"2Ô∏è‚É£ {spread['positions'][1]}\n"
        f"3Ô∏è‚É£ {spread['positions'][2]}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å 3 –∫–∞—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã", web_app=WebAppInfo(url="https://gabanna81.github.io/taro/"))]
        ], resize_keyboard=True),
        parse_mode='Markdown'
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    user = update.effective_user
    # === MAINTENANCE GUARD ===
    if maintenance_block(user.id):
        await update.message.reply_text(MAINTENANCE_MESSAGE, reply_markup=main_keyboard())
        return
    # =========================
    
    if text == "üåü –ö–∞—Ä—Ç–∞ –¥–Ω—è":
        await handle_card_of_day(update, context)
        return
    
    if text == "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É":
        await check_payment(update, context)
        return

    
    if text == "üéÅ +5 –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É":
        await show_sub_bonus(update, context)
        return

    if text == "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã":
        context.user_data['state'] = 'awaiting_cards_manual'
        await update.message.reply_text("–í–≤–µ–¥–∏ 3 –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: ¬´–°–æ–ª–Ω—Ü–µ, –®—É—Ç, –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞¬ª).")
        return

    
    
    if text == "üìö –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã":
        await update.message.reply_text(
            "üîÆ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏—è:**\n\n"
            "üíï –õ—é–±–æ–≤—å - –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞, —Ä–æ–º–∞–Ω—Ç–∏–∫–∞\n"
            "üíº –ö–∞—Ä—å–µ—Ä–∞ - —Ä–∞–±–æ—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è\n" 
            "üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç - —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å",
            reply_markup=ready_spreads_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    if text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
    # 1) —Å—Ç—Ä–æ–∏–º —Å—Å—ã–ª–∫—É –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        bot_username = (context.bot.username or "").lstrip("@")
        link = build_ref_link(user.id, bot_username)

    # 2) –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Markdown)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ú® –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ", url=link)]
    ])

    # 3) —à–ª—ë–º –¢–ï–ö–°–¢ –±–µ–∑ parse_mode, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞—Ç—å
        await update.message.reply_text(
            f"üéÅ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
            f"üì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏!\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π.\n\n"
            f"üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=kb,
            disable_web_page_preview=True  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–ª–∞—Å—å –ø—Ä–µ–≤—å—é—à–∫–∞
        )
        return

    
    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await show_help(update, context)
        return
    
    if text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞":
        await handle_subscription(update, context)
        return
    
    if text == "üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text(
            "üîÆ **–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**\n"
            "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏\n"
            "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤ \"–¥–∞/–Ω–µ—Ç\"\n"
            "‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ª–Ω—É–µ—Ç\n\n"
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode='Markdown'
        )
        context.user_data['state'] = 'awaiting_question'
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state = context.user_data.get('state')
    
    if state == 'awaiting_cards_manual':
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∞–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –∑–∞–ø—è—Ç—ã–µ
        cards = [card.strip() for card in re.split(r'\s*[,;]\s*', text) if card.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç —Ä–æ–≤–Ω–æ 3
        if len(cards) != 3:
            await update.message.reply_text('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 3 –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: –î–≤–æ–π–∫–∞ –∫—É–±–∫–æ–≤, –ß–µ—Ç–≤–µ—Ä–∫–∞ –º–µ—á–µ–π, –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞', reply_markup=main_keyboard())
            context.user_data.clear()
            return

        # –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –ø–æ—á—Ç–∏ —Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ WebApp
        await process_cards(update, context, cards)
        return
    
  
 
    
    
    if state == 'awaiting_question':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
        is_valid, error_message = is_valid_question(text)
        if not is_valid:
            await update.message.reply_text(f"‚ùå {error_message}")
            return
        
        context.user_data['question'] = text
        context.user_data['state'] = 'awaiting_cards'
        
        await update.message.reply_text(
            f"‚úÖ **–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç:**\n_{text}_\n\n"
            f"üÉè –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ 3 –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã", web_app=WebAppInfo(url="https://gabanna81.github.io/taro/"))],
                [KeyboardButton("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã")] # <<< –î–û–ë–ê–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê
            ], resize_keyboard=True),
            parse_mode='Markdown'
        )
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await update.message.reply_text(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é:",
        reply_markup=main_keyboard()
    )

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.callback_query
    tariff_key = query.data
    
    if tariff_key not in TARIFFS:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    tariff = TARIFFS[tariff_key]
    user_id = update.effective_user.id
    
    try:
        payment_url = await create_payment(user_id, tariff_key, tariff)
        if payment_url:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_main")]
            ])
            
            await query.edit_message_text(
                f"üí≥ **–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞**\n\n"
                f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff['price']}‚ÇΩ\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
# ====== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–£–ß–ù–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø ======

def _ensure_user_exists(user_id: int):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ –ë–î ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å"""
    if not get_user(user_id):
        register_user(user_id)

async def _admin_guard(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω"""
    uid = update.effective_user.id if update.effective_user else 0
    if uid != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif update.callback_query:
            await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return False
    return True

async def add_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /add_paid <user_id> <—Å–∫–æ–ª—å–∫–æ>
    –ù–∞—á–∏—Å–ª—è–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç users.paid_requests).
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        assert amount > 0
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_paid <user_id> <—Å–∫–æ–ª—å–∫–æ>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add_paid 123456789 10)")
        return

    _ensure_user_exists(target_id)
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET paid_requests = COALESCE(paid_requests,0) + ? WHERE user_id = ?",
            (amount, target_id)
        )
    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")

async def add_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /add_bonus <user_id> <—Å–∫–æ–ª—å–∫–æ>
    –ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è (users.bonus_requests).
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        assert amount > 0
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_bonus <user_id> <—Å–∫–æ–ª—å–∫–æ>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add_bonus 123456789 5)")
        return

    _ensure_user_exists(target_id)
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET bonus_requests = COALESCE(bonus_requests,0) + ? WHERE user_id = ?",
            (amount, target_id)
        )
    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")

async def reset_free(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /reset_free <user_id>
    –û–±–Ω—É–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö (users.request_count=0) ‚Üí —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ MAX_FREE_REQUESTS.
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /reset_free <user_id>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /reset_free 123456789)")
        return

    _ensure_user_exists(target_id)
    with get_db_connection() as conn:
        conn.execute("UPDATE users SET request_count = 0 WHERE user_id = ?", (target_id,))
    await update.message.reply_text(f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} (—Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ {MAX_FREE_REQUESTS}).")

async def add_sub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /add_sub <user_id> <–¥–Ω–µ–π>
    –í–∫–ª—é—á–∞–µ—Ç/–ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É: users.is_subscribed=1 –∏ –¥–≤–∏–≥–∞–µ—Ç users.subscription_end.
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
        days = int(context.args[1])
        assert days > 0
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_sub <user_id> <–¥–Ω–µ–π>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add_sub 123456789 7)")
        return

    _ensure_user_exists(target_id)
    # —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏
    user = get_user(target_id)
    now = datetime.now()
    base = now
    try:
        if user and user['subscription_end']:
            current_end = datetime.strptime(user['subscription_end'], '%Y-%m-%d %H:%M:%S')
            # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–∞
            if current_end > now:
                base = current_end
    except Exception:
        pass

    new_end = base + timedelta(days=days)
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET is_subscribed = 1, subscription_end = ? WHERE user_id = ?",
            (new_end.strftime('%Y-%m-%d %H:%M:%S'), target_id)
        )
    await update.message.reply_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –ø—Ä–æ–¥–ª–µ–Ω–∞/–≤—ã–¥–∞–Ω–∞ –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}."
    )
# ====== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î ======


async def show_sub_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    already = (u['got_secretlovemagic'] if u else 0)
    if already:
        await update.message.reply_text("‚úÖ –ë–æ–Ω—É—Å —É–∂–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è —Ä–∞–Ω–µ–µ.")
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=SUB_CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="check_sub_secretlovemagic")]
    ])
    await update.message.reply_text(
        f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ +{SUB_BONUS_AMOUNT} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π.\n\n"
        f"1) –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª¬ª –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\n"
        f"2) –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)¬ª ‚Äî –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –Ω–∞—á–∏—Å–ª–∏—Ç –±–æ–Ω—É—Å.",
        reply_markup=kb
    )


async def is_user_subscribed_to_channel(bot, user_id: int) -> bool | None:
    """
    True ‚Äî –ø–æ–¥–ø–∏—Å–∞–Ω, False ‚Äî –Ω–µ—Ç, None ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).
    –í–ê–ñ–ù–û: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @SecretLoveMagic.
    """
    chat_ref = f"@{SUB_CHANNEL_USERNAME}"
    try:
        member = await bot.get_chat_member(chat_id=chat_ref, user_id=user_id)
        return getattr(member, "status", "left") in ("member", "administrator", "creator")
    except Exception as e:
        logger.error(f"get_chat_member failed for {chat_ref}, user {user_id}: {e}")
        return None

async def check_sub_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞"""
    query = update.callback_query
    user_id = update.effective_user.id

    u = get_user(user_id)
    if u and (u['got_secretlovemagic'] or 0) == 1:
        await query.answer("–ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª—ë–Ω —Ä–∞–Ω–µ–µ.", show_alert=True)
        return

    status = await is_user_subscribed_to_channel(context.bot, user_id)
    if status is None:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.", show_alert=True)
        return
    if not status:
        await query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        return

    # –ø–æ–¥–ø–∏—Å–∞–Ω ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET bonus_requests = COALESCE(bonus_requests,0) + ?, got_secretlovemagic = 1 WHERE user_id = ?",
            (SUB_BONUS_AMOUNT, user_id)
        )

    await query.edit_message_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞—á–∏—Å–ª–µ–Ω–æ +{SUB_BONUS_AMOUNT} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π. –°–ø–∞—Å–∏–±–æ!")


async def create_payment(user_id: int, tariff_key: str, tariff: dict) -> str | None:
    try:
        price = tariff.get('test_price', tariff['price'])

        # 1) –≥–µ–Ω–µ—Ä–∏–º order_id –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∂–µ –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        order_id = str(uuid4())

        payment = Payment.create(
            {
                "amount": {"value": f"{price:.2f}", "currency": "RUB"},
                "capture": True,
                "confirmation": {
                    "type": "redirect",
                    "return_url": f"https://t.me/{BOT_USERNAME}?start=pay_{order_id}"
                },
                "description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}",
                "metadata": {
                    "user_id": user_id,
                    "tariff": tariff_key,
                    "order_id": order_id
                }
            },
            idempotency_key=order_id  # –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        )

        pay_url = payment.confirmation.confirmation_url

        # 2) –∑–∞–ø–∏—Å—å –≤ –ë–î (–æ–¥–Ω–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, —Å —Ç–∞–π–º–∞—É—Ç–æ–º)
        with sqlite3.connect('botdata.db', timeout=15) as conn:
            conn.row_factory = sqlite3.Row
            conn.execute("PRAGMA journal_mode=WAL;")
            conn.execute("PRAGMA busy_timeout=15000;")

            # —Å–≤—è–∑–∫–∞ order_id -> payment_id (—Ç–∞–±–ª–∏—Ü–∞-—Å–ª–æ–≤–∞—Ä—å)
            conn.execute("""
                CREATE TABLE IF NOT EXISTS payment_links (
                    order_id   TEXT PRIMARY KEY,
                    payment_id TEXT NOT NULL
                )
            """)
            conn.execute(
                "INSERT OR REPLACE INTO payment_links(order_id, payment_id) VALUES(?, ?)",
                (order_id, payment.id)
            )

            # –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ payments (—Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞)
            conn.execute("""
                CREATE TABLE IF NOT EXISTS payments (
                    payment_id TEXT PRIMARY KEY,
                    user_id    INTEGER,
                    tariff     TEXT,
                    amount     REAL,
                    status     TEXT DEFAULT 'pending',
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.execute(
                "INSERT OR IGNORE INTO payments(payment_id, user_id, tariff, amount, status) VALUES (?, ?, ?, ?, 'pending')",
                (payment.id, user_id, tariff_key, price)
            )

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º last_payment_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            conn.execute(
                "UPDATE users SET last_payment_id = ? WHERE user_id = ?",
                (payment.id, user_id)
            )

        return pay_url

    except Exception as e:
        logger.exception(f"create_payment error: {e}")
        return None

def activate_subscription(user_id: int, tariff_key: str, payment_id: str) -> None:
    """
    –û—Ç–º–µ—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ–π –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑:
    - –¥–ª—è 'requests' —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç users.paid_requests
    - –¥–ª—è 'days' –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    """
    now = datetime.now()
    tariff = TARIFFS.get(tariff_key)
    if not tariff:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ {tariff_key} –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {payment_id}")
        return

    with get_db_connection() as conn:
        # 0) –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        row = conn.execute(
            "SELECT status FROM payments WHERE payment_id = ?",
            (payment_id,)
        ).fetchone()

        already_succeeded = bool(row and (row["status"] == "succeeded"))

        if not already_succeeded:
            # –ø–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º
            conn.execute(
                "UPDATE payments SET status = 'succeeded' WHERE payment_id = ?",
                (payment_id,)
            )

            # –Ω–∞—á–∏—Å–ª—è–µ–º
            if "requests" in tariff:
                add = int(tariff["requests"])
                conn.execute(
                    "UPDATE users SET paid_requests = COALESCE(paid_requests,0) + ? WHERE user_id = ?",
                    (add, user_id)
                )
                logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {add} –ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            elif "days" in tariff:
                days = int(tariff["days"])
                u = get_user(user_id)
                base = now
                try:
                    if u and u["subscription_end"]:
                        current_end = datetime.strptime(u["subscription_end"], "%Y-%m-%d %H:%M:%S")
                        if current_end > now:
                            base = current_end
                except Exception:
                    pass

                new_end = base + timedelta(days=days)
                conn.execute(
                    "UPDATE users SET is_subscribed = 1, subscription_end = ? WHERE user_id = ?",
                    (new_end.strftime("%Y-%m-%d %H:%M:%S"), user_id)
                )
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ {new_end}")

        # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî –∑–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π payment_id
        conn.execute(
            "UPDATE users SET last_payment_id = ? WHERE user_id = ?",
            (payment_id, user_id)
        )



def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not check_openai_setup():
        print("‚ùå OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY")
        return

    init_db()

    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CommandHandler("check_payment", check_payment))

    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫ —É —Ç–µ–±—è)
    app.add_handler(CommandHandler("add_paid", add_paid))
    app.add_handler(CommandHandler("add_bonus", add_bonus))
    app.add_handler(CommandHandler("reset_free", reset_free))
    app.add_handler(CommandHandler("add_sub", add_sub))
    app.add_handler(CommandHandler("broadcast", broadcast))

    logger.info("ü§ñ –¢–∞—Ä–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("ü§ñ –¢–∞—Ä–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # --- KEEPALIVE –¥–ª—è Render Free (–Ω–µ –¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—É —É—Å–Ω—É—Ç—å) ---
    # –í–∫–ª—é—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è KEEPALIVE=1
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∏–Ω–≥—É–µ–º –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞: https://<PUBLIC_URL>/<TOKEN>
    if os.getenv("KEEPALIVE", "1") == "1" and PUBLIC_URL:
        async def _keepalive(_):
            try:
                url = os.getenv("KEEPALIVE_URL") or f"{PUBLIC_URL}/{TOKEN}"
                async with httpx.AsyncClient(timeout=5.0) as client:
                    # –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–≤–∞–∂–µ–Ω; –≥–ª–∞–≤–Ω–æ–µ ‚Äî –≤—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫
                    await client.get(url)
                logger.info("keepalive ok")
            except Exception as e:
                logger.warning(f"keepalive failed: {e}")
        # –∫–∞–∂–¥—ã–µ 9 –º–∏–Ω—É—Ç, –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        app.job_queue.run_repeating(_keepalive, interval=540, first=60)


    # === –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –ó–ê–ü–£–°–ö–ê ===
    USE_WEBHOOK = os.getenv("USE_WEBHOOK", "0") == "1"
    if USE_WEBHOOK:
        # –î–ª—è Render (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ —Å –ø—É–±–ª–∏—á–Ω—ã–º URL)
        PORT = int(os.environ.get("PORT", "8080"))
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=f"{PUBLIC_URL}/{TOKEN}",
            drop_pending_updates=True
        )
    else:
        # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
        app.run_polling(drop_pending_updates=True)

    
    
if __name__ == '__main__':

    main()

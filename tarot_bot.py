import logging
import csv
import sqlite3
import json
import os
import traceback
import random
import time
import sys
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from openai import OpenAI
from yookassa import Configuration, Payment
import uuid
import httpx
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("http_proxy", None)
os.environ.pop("https_proxy", None)


# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π —Ç–∞—Ä–æ
try:
    from tarot_interpretations import TAROT_DAY_INTERPRETATIONS, CONSULTATION_BLOCK
except ImportError:
    TAROT_DAY_INTERPRETATIONS = {}
    CONSULTATION_BLOCK = "üí´ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @nik_Anna_Er"

client = OpenAI()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FREE_REQUESTS = 10
MAX_QUESTION_LENGTH = 500
MIN_QUESTION_LENGTH = 3
OPENAI_MAX_TOKENS = 700
API_RETRY_ATTEMPTS = 3
API_RETRY_DELAY = 2

# –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
SUB_CHANNEL_USERNAME = os.getenv("SUB_CHANNEL_USERNAME", "SecretLoveMagic")  # –±–µ–∑ @
SUB_CHANNEL_LINK = f"https://t.me/SecretLoveMagic"
SUB_BONUS_AMOUNT = int(os.getenv("SUB_BONUS_AMOUNT", "5"))

PUBLIC_URL = os.getenv("PUBLIC_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://<–∏–º—è-—Å–µ—Ä–≤–∏—Å–∞>.onrender.com


# OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# === OpenAI Chat settings (–Ω–æ–≤—ã–µ) ===
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OPENAI_TEMPERATURE = float(os.getenv("OPENAI_TEMPERATURE", "0.7"))
OPENAI_TIMEOUT = float(os.getenv("OPENAI_TIMEOUT", "30.0"))  # —Å–µ–∫
# OPENAI_MAX_TOKENS —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—Å—Ç–∞–≤—å –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å (700 –∏–ª–∏ 600)




# –ü—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
TOKEN = os.getenv('TELEGRAM_TOKEN', '7880322246:AAELUDeL3KQa0Gw9wfVRkKmWvQU_Xw74u0Q')
CHANNEL_ID = "-1002141657943"
CHANNEL_LINK = "https://t.me/taromagia"
OBOI_LINK = "https://t.me/taromagia/13"
TAROLOG_LINK = "https://t.me/nikAnnaEr"

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    'pay10':       {'price': 100.00, 'name': '–î–æ–∫—É–ø–∏—Ç—å 10',      'requests': 10, 'test_price': 1.00},
    'pay30':       {'price': 190.00, 'name': '–î–æ–∫—É–ø–∏—Ç—å 30',      'requests': 30},
    'pay3_unlim':  {'price': 150.00, 'name': '–ë–µ–∑–ª–∏–º–∏—Ç 3 –¥–Ω—è',   'days': 3},
    'pay14_unlim': {'price': 350.00, 'name': '–ë–µ–∑–ª–∏–º–∏—Ç 2 –Ω–µ–¥–µ–ª–∏','days': 14},
    'pay30_unlim': {'price': 490.00, 'name': '–ë–µ–∑–ª–∏–º–∏—Ç –º–µ—Å—è—Ü',   'days': 30}  # –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
}


WELCOME_TEXT = """üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ! üîÆ

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
üåü –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã  
üìö –ò–∑—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

–ü–µ—Ä–≤—ã–µ 10 –≥–∞–¥–∞–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

üí´ –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: @nik\\_Anna\\_Er"""

# YooKassa –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
Configuration.account_id = os.getenv('YOOKASSA_ACCOUNT_ID')
Configuration.secret_key = os.getenv('YOOKASSA_SECRET_KEY')

def check_openai_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API"""
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        logger.error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    if not api_key.startswith('sk-'):
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç OPENAI_API_KEY!")
        return False
    logger.info("OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    return True

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('botdata.db')
        conn.row_factory = sqlite3.Row

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ—Ç)
        conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                request_count INTEGER DEFAULT 0,
                is_subscribed BOOLEAN DEFAULT FALSE,
                is_banned BOOLEAN DEFAULT FALSE,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                paid_requests INTEGER DEFAULT 0,
                last_payment_id TEXT,
                subscription_end TEXT,
                referrer_id INTEGER,
                bonus_requests INTEGER DEFAULT 0
            )
        ''')

        # üîπ –ú–∏–≥—Ä–∞—Ü–∏—è: —Ñ–ª–∞–∂–æ–∫ "–±–æ–Ω—É—Å –∑–∞ –∫–∞–Ω–∞–ª —É–∂–µ –≤—ã–¥–∞–Ω" (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
        try:
            conn.execute("ALTER TABLE users ADD COLUMN got_secretlovemagic INTEGER DEFAULT 0")
        except sqlite3.OperationalError:
            # –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
            pass

        # –ò–Ω–¥–µ–∫—Å—ã
        conn.execute("CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id)")
        conn.execute("CREATE INDEX IF NOT EXISTS idx_users_subscription_end ON users(subscription_end)")

        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


def get_db_connection():
    conn = sqlite3.connect('botdata.db')
    conn.row_factory = sqlite3.Row
    return conn

def get_user(user_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return cursor.fetchone()

def update_user(user_id, username=None, increment_count=False):
    with get_db_connection() as conn:
        if username:
            conn.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        if increment_count:
            conn.execute("UPDATE users SET request_count = request_count + 1 WHERE user_id = ?", (user_id,))

def register_user(user_id, username=None, first_name=None, last_name=None, referrer_id=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        conn.execute("""
            INSERT OR IGNORE INTO users (user_id, username, referrer_id) 
            VALUES (?, ?, ?)
        """, (user_id, username, referrer_id))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        if referrer_id and referrer_id != user_id:
            conn.execute("""
                UPDATE users SET bonus_requests = bonus_requests + 5 
                WHERE user_id = ?
            """, (referrer_id,))
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ 5 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id}")

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user(user_id)
    if not user:
        return None
    
    # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    free_requests = max(0, MAX_FREE_REQUESTS - user['request_count'])
    paid_requests = user['paid_requests'] or 0
    bonus_requests = user['bonus_requests'] or 0
    
    return {
        'user_id': user['user_id'],
        'username': user['username'],
        'is_subscribed': user['is_subscribed'],
        'is_banned': user['is_banned'],
        'subscription_end': user['subscription_end'],
        'free_requests': free_requests,
        'paid_requests': paid_requests,
        'bonus_requests': bonus_requests,
        'total_requests': free_requests + paid_requests + bonus_requests
    }

def is_subscription_active(user_id, subscription_end_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not subscription_end_str:
        return False
    
    try:
        sub_end_date = datetime.strptime(subscription_end_str, '%Y-%m-%d %H:%M:%S')
        if datetime.now() > sub_end_date:
            with get_db_connection() as conn:
                conn.execute("UPDATE users SET is_subscribed = 0, subscription_end = NULL WHERE user_id = ?", (user_id,))
            return False
        return True
    except ValueError:
        return False

def save_user_id(user_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not os.path.exists('user_ids.txt'):
        open('user_ids.txt', 'w').close()
    
    with open('user_ids.txt', 'r') as file:
        existing_ids = file.read().splitlines()
    
    if str(user_id) not in existing_ids:
        with open('user_ids.txt', 'a') as file:
            file.write(f"{user_id}\n")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

def can_make_request(user_data, user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
    if user_id == ADMIN_ID or user_data['is_subscribed']:
        return True
    
    free_remaining = max(0, MAX_FREE_REQUESTS - user_data['request_count'])
    paid_requests = user_data['paid_requests'] or 0
    bonus_requests = user_data['bonus_requests'] or 0
    
    return (free_remaining + paid_requests + bonus_requests) > 0

def get_all_user_ids() -> list[int]:
    with get_db_connection() as conn:
        rows = conn.execute("SELECT user_id FROM users").fetchall()
        return [int(r["user_id"]) for r in rows if r["user_id"] is not None]


async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # —Ç–µ–∫—Å—Ç –±–µ—Ä—ë–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    text = " ".join(context.args) if context.args else ""
    if not text.strip():
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    user_ids = get_all_user_ids()
    ok = fail = 0
    # –º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã
    for uid in user_ids:
        try:
            await context.bot.sendMessage(chat_id=uid, text=text, disable_web_page_preview=True)
            ok += 1
        except Exception:
            fail += 1
        await asyncio.sleep(0.05)  # ‚âà20 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. ‚úÖ {ok} | ‚ùå {fail} | –í—Å–µ–≥–æ: {len(user_ids)}")


async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"ALL_HANDLER update: {update}")
    if getattr(update.message, 'web_app_data', None):
        logger.info(f"web_app_data: {update.message.web_app_data.data}")
    if getattr(update, 'callback_query', None):
        logger.info(f"callback_query: {update.callback_query}")



async def deduct_user_request(user_id: int) -> bool:
    """–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if user_id == ADMIN_ID:
        return True
    
    with get_db_connection() as conn:
        user_data = get_user(user_id)
        
        if not user_data:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if user_data['is_subscribed'] and check_subscription_expiry(user_data):
            return True
        
        free_remaining = max(0, MAX_FREE_REQUESTS - user_data['request_count'])
        bonus_requests = user_data['bonus_requests'] or 0
        paid_requests = user_data['paid_requests'] or 0
        
        if free_remaining > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            conn.execute("UPDATE users SET request_count = request_count + 1 WHERE user_id = ?", (user_id,))
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        elif bonus_requests > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            conn.execute("UPDATE users SET bonus_requests = bonus_requests - 1 WHERE user_id = ?", (user_id,))
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        elif paid_requests > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            conn.execute("UPDATE users SET paid_requests = paid_requests - 1 WHERE user_id = ?", (user_id,))
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        else:
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã")
            return False

async def refund_user_request(user_id: int):
    """–í–æ–∑–≤—Ä–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    if user_id == ADMIN_ID:
        return
    
    with get_db_connection() as conn:
        user_data = get_user(user_id)
        if user_data['is_subscribed']:
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å (—É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫)
        if user_data['request_count'] > 0:
            conn.execute("UPDATE users SET request_count = request_count - 1 WHERE user_id = ?", (user_id,))
            logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

def check_subscription_expiry(user_data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not user_data['is_subscribed']:
        return False
    
    subscription_end_str = user_data['subscription_end']
    if not subscription_end_str:
        return False
    
    try:
        sub_end_date = datetime.strptime(subscription_end_str, '%Y-%m-%d %H:%M:%S')
        if datetime.now() > sub_end_date:
            with get_db_connection() as conn:
                conn.execute("UPDATE users SET is_subscribed = 0, subscription_end = NULL WHERE user_id = ?", (user_data['user_id'],))
            return False
        return True
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}: {subscription_end_str}")
        return False

def log_request(user_id, username, question, cards):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ CSV"""
    try:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cards_str = ', '.join(cards) if isinstance(cards, list) else str(cards)
        
        file_exists = os.path.isfile('user_requests.csv')
        with open('user_requests.csv', 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow(['timestamp', 'user_id', 'username', 'question', 'cards'])
            writer.writerow([timestamp, user_id, username, question, cards_str])
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥: {user_id} - {question[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

def build_ref_link(user_id: int, bot_username: str) -> str:
    # username –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ 'MyBot' –∏–ª–∏ '@MyBot' ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    bot_username = bot_username.lstrip('@')
    return f"https://t.me/{bot_username}?start=ref_{user_id}"


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üåü –ö–∞—Ä—Ç–∞ –¥–Ω—è")],
        [KeyboardButton("üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton("üìö –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã")],
        [KeyboardButton("üéÅ +5 –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        [KeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")]
    ], resize_keyboard=True)


def ready_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíï –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="category_love")],
        [InlineKeyboardButton("üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã", callback_data="category_career")], 
        [InlineKeyboardButton("üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", callback_data="category_growth")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def love_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –ª—é–±–æ–≤—å"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≠ –ß—Ç–æ –æ–Ω/–æ–Ω–∞ –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?", callback_data="spread_love_thoughts")],
        [InlineKeyboardButton("üîÆ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π", callback_data="spread_love_prospects")],
        [InlineKeyboardButton("üëª –ü–æ—á–µ–º—É –æ–Ω/–æ–Ω–∞ –∏—Å—á–µ–∑?", callback_data="spread_love_disappeared")],
        [InlineKeyboardButton("ü™û –ó–µ—Ä–∫–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π", callback_data="spread_love_mirror")],
        [InlineKeyboardButton("‚ùì –°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è?", callback_data="spread_love_continue")],
        [InlineKeyboardButton("‚ú® –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å –ª—é–±–æ–≤—å?", callback_data="spread_love_attract")],
        [InlineKeyboardButton("üíî –ö–∞–∫ –ø–µ—Ä–µ–∂–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ", callback_data="spread_love_breakup")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")]
    ])

def career_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíº –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ", callback_data="spread_career_prospects")],
        [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ", callback_data="spread_career_money")],
        [InlineKeyboardButton("üéØ –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data="spread_career_choice")],
        [InlineKeyboardButton("üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç", callback_data="spread_career_growth")],
        [InlineKeyboardButton("ü§ù –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏", callback_data="spread_career_colleagues")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")]
    ])

def growth_spreads_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéØ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏", callback_data="spread_growth_goals")],
        [InlineKeyboardButton("üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="spread_growth_changes")],
        [InlineKeyboardButton("üåü –¢–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data="spread_growth_talents")],
        [InlineKeyboardButton("‚öñÔ∏è –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏", callback_data="spread_growth_karma")],
        [InlineKeyboardButton("üßò –î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="spread_growth_spiritual")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")]
    ])

def subscription_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé –î–æ–∫—É–ø–∏—Ç—å 10 ‚Äî 100‚ÇΩ", callback_data="pay10")],
        [InlineKeyboardButton("‚ú® –î–æ–∫—É–ø–∏—Ç—å 30 ‚Äî 190‚ÇΩ", callback_data="pay30")],
        [InlineKeyboardButton("üåü –ë–µ–∑–ª–∏–º–∏—Ç 3 –¥–Ω—è ‚Äî 150‚ÇΩ", callback_data="pay3_unlim")],
        [InlineKeyboardButton("üí´ –ë–µ–∑–ª–∏–º–∏—Ç 2 –Ω–µ–¥–µ–ª–∏ ‚Äî 350‚ÇΩ", callback_data="pay14_unlim")],
        [InlineKeyboardButton("üî• –ë–µ–∑–ª–∏–º–∏—Ç –º–µ—Å—è—Ü ‚Äî 490‚ÇΩ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)", callback_data="pay30_unlim")]
    ])


# –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
READY_SPREADS = {
    # –õ—é–±–æ–≤—å
    "spread_love_thoughts": {
        "title": "üí≠ –ß—Ç–æ –æ–Ω/–æ–Ω–∞ –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?",
        "description": "–†–∞—Å–∫–ª–∞–¥ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫–∞",
        "positions": ["–ï–≥–æ/–µ—ë –º—ã—Å–ª–∏ –æ –≤–∞—Å", "–°–∫—Ä—ã—Ç—ã–µ —á—É–≤—Å—Ç–≤–∞", "–ß—Ç–æ –º–µ—à–∞–µ—Ç —Å–±–ª–∏–∂–µ–Ω–∏—é"]
    },
    "spread_love_prospects": {
        "title": "üîÆ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π", 
        "description": "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥–µ—Ç –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º",
        "positions": ["–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ò—Ç–æ–≥ –æ—Ç–Ω–æ—à–µ–Ω–∏–π"]
    },
    "spread_love_disappeared": {
        "title": "üëª –ü–æ—á–µ–º—É –æ–Ω/–æ–Ω–∞ –∏—Å—á–µ–∑?",
        "description": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
        "positions": ["–ò—Å—Ç–∏–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞", "–ï–≥–æ/–µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–°—Ç–æ–∏—Ç –ª–∏ –∂–¥–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è"]
    },
    "spread_love_mirror": {
        "title": "ü™û –ó–µ—Ä–∫–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "description": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "positions": ["–í–∞—à –≤–∫–ª–∞–¥ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–í–∫–ª–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞", "–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"]
    },
    "spread_love_continue": {
        "title": "‚ùì –°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è?",
        "description": "–ü–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ –±—É–¥—É—â–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "positions": ["–ü–ª—é—Å—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", "–ú–∏–Ω—É—Å—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", "–°–æ–≤–µ—Ç –∫–∞—Ä—Ç"]
    },
    "spread_love_attract": {
        "title": "‚ú® –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å –ª—é–±–æ–≤—å?",
        "description": "–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –Ω–æ–≤–æ–π –ª—é–±–≤–∏ –≤ –≤–∞—à—É –∂–∏–∑–Ω—å",
        "positions": ["–ß—Ç–æ –º–µ—à–∞–µ—Ç –ª—é–±–≤–∏", "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å", "–ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"]
    },
    "spread_love_breakup": {
        "title": "üíî –ö–∞–∫ –ø–µ—Ä–µ–∂–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ",
        "description": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ç—Ä—É–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è",
        "positions": ["–ü—Ä–∏—á–∏–Ω–∞ –±–æ–ª–∏", "–£—Ä–æ–∫ —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è", "–ü—É—Ç—å –∫ –∏—Å—Ü–µ–ª–µ–Ω–∏—é"]
    },
    
    # –ö–∞—Ä—å–µ—Ä–∞
    "spread_career_prospects": {
        "title": "üíº –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ",
        "description": "–í–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã",
        "positions": ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–°–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
    },
    "spread_career_money": {
        "title": "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ",
        "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "positions": ["–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ü—É—Ç—å –∫ –∏–∑–æ–±–∏–ª–∏—é"]
    },
    "spread_career_choice": {
        "title": "üéØ –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        "description": "–ü–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º",
        "positions": ["–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–ü–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ñ–µ—Ä–∞", "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏"]
    },
    "spread_career_growth": {
        "title": "üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
        "description": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è",
        "positions": ["–¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏", "–ß—Ç–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞"]
    },
    "spread_career_colleagues": {
        "title": "ü§ù –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏",
        "description": "–£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "positions": ["–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ", "–í–∞—à–∞ —Ä–æ–ª—å", "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
    },
    
    # –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç
    "spread_growth_goals": {
        "title": "üéØ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏",
        "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π",
        "positions": ["–ò—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ü—É—Ç—å –∫ —Ü–µ–ª–∏"]
    },
    "spread_growth_changes": {
        "title": "üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        "description": "–ü—Ä–æ—Ü–µ—Å—Å –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "positions": ["–ß—Ç–æ —É—Ö–æ–¥–∏—Ç", "–ß—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç", "–ö–∞–∫ –ø—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"]
    },
    "spread_growth_talents": {
        "title": "üåü –¢–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
        "description": "–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤",
        "positions": ["–°–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–µ–Ω—Ç", "–ö–∞–∫ —Ä–∞–∑–≤–∏—Ç—å", "–ì–¥–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å"]
    },
    "spread_growth_karma": {
        "title": "‚öñÔ∏è –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
        "description": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤",
        "positions": ["–ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞", "–£—Ä–æ–∫ –¥–ª—è –¥—É—à–∏", "–ü—É—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"]
    },
    "spread_growth_spiritual": {
        "title": "üßò –î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        "description": "–î—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        "positions": ["–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å", "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", "–î—É—Ö–æ–≤–Ω–∞—è —Ü–µ–ª—å"]
    }
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
async def get_tarot_reading(prompt: str) -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.
    –ö–ª—é—á –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY (–Ω–∏–≥–¥–µ –≤ –∫–æ–¥–µ –Ω–µ –Ω—É–∂–µ–Ω).
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI: prompt={prompt[:120]}...")

    model_name = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ .env –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    system_prompt = (
        "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç —Ç–∞—Ä–æ. "
        "1. –ù–∞—á–∏–Ω–∞–π —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
        "2. –ò—Å–ø–æ–ª—å–∑—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. 3. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. "
        "4. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, –Ω–æ —á–µ—Å—Ç–Ω—ã–º. 3-4 –∞–±–∑–∞—Ü–∞ –º–∞–∫—Å–∏–º—É–º. "
        "5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ –≤ –∫–æ–Ω—Ü–µ. –ü–∏—à–∏ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Ü–∞. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ '–í—ã'. "
        "–ó–∞–∫–∞–Ω—á–∏–≤–∞–π –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º —É–¥–∞—á–∏."
    )

    last_error = None
    for attempt in range(API_RETRY_ATTEMPTS):
        try:
            client = OpenAI()  # –∫–ª—é—á –≤–æ–∑—å–º—ë—Ç—Å—è –∏–∑ OPENAI_API_KEY
            response = client.chat.completions.create(
                model=model_name,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=OPENAI_MAX_TOKENS,
                temperature=0.7
            )
            result = (response.choices[0].message.content or "").strip()
            finish_reason = getattr(response.choices[0], "finish_reason", "n/a")
            logger.info(f"OpenAI finish_reason={finish_reason}, len={len(result)}")

            if not result:
                raise RuntimeError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

            return result

        except Exception as e:
            last_error = e
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{API_RETRY_ATTEMPTS}): {e}")
            if attempt < API_RETRY_ATTEMPTS - 1:
                await asyncio.sleep(API_RETRY_DELAY * (attempt + 1))

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —É–ø–∞–ª–∏ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    raise last_error if last_error else RuntimeError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI")






# –í–∞–ª–∏–¥–∞—Ü–∏—è
def is_valid_question(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞"""
    if not text:
        return False, "–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    
    if len(text) < MIN_QUESTION_LENGTH:
        return False, f"–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º {MIN_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–∞."
    
    if len(text) > MAX_QUESTION_LENGTH:
        return False, f"–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
    
    return True, ""

def is_valid_cards(cards):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç"""
    if not cards:
        return False, "–ö–∞—Ä—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."
    
    if not isinstance(cards, list):
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç."
    
    if len(cards) != 3:
        return False, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–æ —Ä–æ–≤–Ω–æ 3 –∫–∞—Ä—Ç—ã."
    
    return True, ""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    args = context.args
    
    referrer_id = None
    if args and args[0].startswith('ref_'):
        try:
            referrer_id = int(args[0].replace('ref_', ''))
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")
        except ValueError:
            pass
    
    register_user(user.id, user.username, user.first_name, user.last_name, referrer_id)
    
    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=main_keyboard(),
        parse_mode='Markdown'
    )

async def handle_card_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä—Ç—ã –¥–Ω—è"""
    context.user_data['is_card_of_day'] = True
    context.user_data['question'] = '–ö–∞—Ä—Ç–∞ –¥–Ω—è'

    await update.message.reply_text(
        "üåü *–ö–∞—Ä—Ç–∞ –¥–Ω—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è", 
                        web_app=WebAppInfo(url="https://gabanna81.github.io/taro-daily/"))]
        ], resize_keyboard=True),
        parse_mode='Markdown'
    )

async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_data = get_user_data(update.effective_user.id)
    if not user_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    free_requests = user_data['free_requests']
    paid_requests = user_data['paid_requests']
    bonus_requests = user_data['bonus_requests']
    subscription_end = user_data['subscription_end']
    
    status_text = f"üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å:**\n\n"
    status_text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π: {free_requests}\n"
    status_text += f"üíé –ü–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π: {paid_requests}\n"
    status_text += f"üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π: {bonus_requests}\n"
    
    if subscription_end and is_subscription_active(update.effective_user.id, subscription_end):
        end_date = datetime.strptime(subscription_end, '%Y-%m-%d %H:%M:%S')
        status_text += f"‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
    else:
        status_text += "üìÖ –ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç\n"
    
    status_text += "\nüí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:**"
    
    await update.message.reply_text(
        status_text,
        reply_markup=subscription_keyboard(),
        parse_mode='Markdown'
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

üîÆ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ üåü –ö–∞—Ä—Ç–∞ –¥–Ω—è - –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É-—Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å
‚Ä¢ üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ 3 –∫–∞—Ä—Ç—ã
‚Ä¢ üìö –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç
‚Ä¢ –ü–µ—Ä–≤—ã–µ 10 –≥–∞–¥–∞–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @nik\\_Anna\\_Er

üåü **–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ:**
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π"""

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê handle_webapp ===")
    logger.info(f"context.user_data = {dict(context.user_data)}")
    logger.info(f"–ï—Å—Ç—å question? {bool(context.user_data.get('question'))}")
    logger.info(f"–ï—Å—Ç—å spread_positions? {bool(context.user_data.get('spread_positions'))}")
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user = update.effective_user
        
        cards = data.get('cards', [])
        if not cards:
            await update.message.reply_text("‚ùå –ö–∞—Ä—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
            return
        
        user_data = get_user_data(user.id)
        if not user_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        if user_data['is_banned']:
            await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        
        is_card_of_day = context.user_data.get('is_card_of_day', False)
        
        if is_card_of_day:
            # –ö–∞—Ä—Ç–∞ –¥–Ω—è - –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞
            if len(cards) < 1:
                await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
                context.user_data.clear()
                return
            
            selected_card = cards[0]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            if not await deduct_user_request(user.id):
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è! üí∞ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    reply_markup=subscription_keyboard()
                )
                context.user_data.clear()
                return
            
            processing_message = await update.message.reply_text("üîÆ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∫–∞—Ä—Ç—É –¥–Ω—è...")
            
            try:
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è
                base_interpretation = TAROT_DAY_INTERPRETATIONS.get(
                    selected_card.lower(), 
                    "üåü –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ—Å—å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –≤–æ–ª–Ω—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏!"
                )
                interpretation = f"{base_interpretation}\n\n{CONSULTATION_BLOCK}"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è: {e}")
                interpretation = "üåü –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ—Å—å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –≤–æ–ª–Ω—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏!"
            
            log_request(user.id, user.username, "–ö–∞—Ä—Ç–∞ –¥–Ω—è", [selected_card])
            
            await processing_message.edit_text(interpretation)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
        
        else:
            # –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ì–ê–î–ê–ù–ò–Ø (–æ–±—ã—á–Ω—ã–µ + –≥–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã) - –û–î–ò–ù–ê–ö–û–í–ê–Ø –õ–û–ì–ò–ö–ê
            question = context.user_data.get('question')
            if not question:
                await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                context.user_data.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç
            is_valid, error_message = is_valid_cards(cards)
            if not is_valid:
                await update.message.reply_text(f"‚ùå {error_message}")
                context.user_data.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            if not await deduct_user_request(user.id):
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è! üí∞ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    reply_markup=subscription_keyboard()
                )
                context.user_data.clear()
                return
            
            processing_message = await update.message.reply_text("üîÆ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∫–∞—Ä—Ç—ã...")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ (–≥–æ—Ç–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ)
                spread_positions = context.user_data.get('spread_positions')
                
                if spread_positions:
                    # –ì–û–¢–û–í–´–ô –†–ê–°–ö–õ–ê–î - –ø—Ä–æ–º–ø—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
                    position_descriptions = []
                    for i, (card, position) in enumerate(zip(cards, spread_positions), 1):
                        position_descriptions.append(f"{i}. {position}: {card}")
                    
                    prompt = (
                        f"–í–æ–ø—Ä–æ—Å: {question}\n"  
                        f"–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ: {', '.join(cards)}.\n"
                        f"–ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞: {'; '.join(position_descriptions)}.\n"
                        f"–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, –∑–∞—Ç–µ–º –æ–±—â–∏–π –≤—ã–≤–æ–¥."
                    )
                else:
                    # –û–ë–´–ß–ù–û–ï –ì–ê–î–ê–ù–ò–ï - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                    prompt = f"–í–æ–ø—Ä–æ—Å: {question}\n–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ: {', '.join(cards)}.\n–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞."
                
                interpretation = await get_tarot_reading(prompt)
                final_text = f"{interpretation}\n\n{CONSULTATION_BLOCK}"
                
                log_request(user.id, user.username, question, cards)
                
                await processing_message.edit_text(final_text)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
                await refund_user_request(user.id)
                await processing_message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∫–∞—Ä—Ç. –ó–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        
        context.user_data.clear()
        
    except json.JSONDecodeError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        context.user_data.clear()

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    
    if data == "category_love":
        await query.edit_message_text(
            "üíï **–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞—Å–∫–ª–∞–¥:",
            reply_markup=love_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "show_ref_text":
        bot_username = (context.bot.username or "").lstrip("@")
        link = build_ref_link(update.effective_user.id, bot_username)
        await query.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
        await query.message.reply_text(link, disable_web_page_preview=True)
        return
    
    elif data == "category_career":
        await query.edit_message_text(
            "üíº **–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –∫–∞—Ä—å–µ—Ä—É –∏ —Ñ–∏–Ω–∞–Ω—Å—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞—Å–∫–ª–∞–¥:",
            reply_markup=career_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "check_sub_secretlovemagic":
        await check_sub_bonus(update, context)
        return

    
    elif data == "category_growth":
        await query.edit_message_text(
            "üå± **–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞—Å–∫–ª–∞–¥:",
            reply_markup=growth_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "back_categories":
        await query.edit_message_text(
            "üîÆ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏—è:**\n\n"
            "üíï –õ—é–±–æ–≤—å - –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞, —Ä–æ–º–∞–Ω—Ç–∏–∫–∞\n"
            "üíº –ö–∞—Ä—å–µ—Ä–∞ - —Ä–∞–±–æ—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è\n" 
            "üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç - —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å",
            reply_markup=ready_spreads_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "back_main":
        await query.edit_message_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"
    )        
    elif data.startswith('spread'):
        await handle_ready_spread(update, context, data)    
        
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    elif data.startswith("spread_"):
        await handle_ready_spread(update, context, data)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    elif data.startswith("pay"):
        await process_payment(update, context)
        

async def handle_ready_spread(update: Update, context: ContextTypes.DEFAULT_TYPE, spread_key: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (—á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é ReplyKeyboard —Å webapp)"""
    logger.info(f"=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê handle_ready_spread {spread_key} ===")
    query = update.callback_query

    if spread_key not in READY_SPREADS:
        await query.edit_message_text("‚ùå –†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    spread = READY_SPREADS[spread_key]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å + –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    context.user_data['question'] = spread['title']
    context.user_data['spread_positions'] = spread['positions']
    context.user_data['state'] = 'awaiting_cards'

    logger.info(f"–°–û–•–†–ê–ù–ò–õ–ò –≤ context.user_data: {dict(context.user_data)}")

    # 1. –û–ø–æ–≤–µ—â–∞–µ–º –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ (–∑–∞–º–µ–Ω—è–µ—Ç edit_message_text)
    await query.edit_message_text(
        f"üîÆ *–í—ã–±—Ä–∞–Ω —Ä–∞—Å–∫–ª–∞–¥:*\n"
        f"{spread['title']}\n\n"
        f"üìù {spread['description']}",
        parse_mode='Markdown'
    )

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π WebApp (ReplyKeyboard)
    await query.message.reply_text(
        f"üÉè *–ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞:*\n"
        f"1Ô∏è‚É£ {spread['positions'][0]}\n"
        f"2Ô∏è‚É£ {spread['positions'][1]}\n"
        f"3Ô∏è‚É£ {spread['positions'][2]}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å 3 –∫–∞—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã", web_app=WebAppInfo(url="https://gabanna81.github.io/taro/"))]
        ], resize_keyboard=True),
        parse_mode='Markdown'
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    user = update.effective_user
    
    if text == "üåü –ö–∞—Ä—Ç–∞ –¥–Ω—è":
        await handle_card_of_day(update, context)
        return
    
    if text == "üéÅ +5 –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É":
        await show_sub_bonus(update, context)
        return

    
    if text == "üìö –ì–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã":
        await update.message.reply_text(
            "üîÆ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏—è:**\n\n"
            "üíï –õ—é–±–æ–≤—å - –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞, —Ä–æ–º–∞–Ω—Ç–∏–∫–∞\n"
            "üíº –ö–∞—Ä—å–µ—Ä–∞ - —Ä–∞–±–æ—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è\n" 
            "üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç - —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å",
            reply_markup=ready_spreads_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    if text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
    # 1) —Å—Ç—Ä–æ–∏–º —Å—Å—ã–ª–∫—É –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        bot_username = (context.bot.username or "").lstrip("@")
        link = build_ref_link(user.id, bot_username)

    # 2) –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Markdown)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ú® –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ", url=link)]
    ])

    # 3) —à–ª—ë–º –¢–ï–ö–°–¢ –±–µ–∑ parse_mode, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞—Ç—å
        await update.message.reply_text(
            f"üéÅ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
            f"üì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏!\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π.\n\n"
            f"üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=kb,
            disable_web_page_preview=True  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–ª–∞—Å—å –ø—Ä–µ–≤—å—é—à–∫–∞
        )
        return

    
    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await show_help(update, context)
        return
    
    if text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞":
        await handle_subscription(update, context)
        return
    
    if text == "üÉè –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text(
            "üîÆ **–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**\n"
            "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏\n"
            "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤ \"–¥–∞/–Ω–µ—Ç\"\n"
            "‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ª–Ω—É–µ—Ç\n\n"
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode='Markdown'
        )
        context.user_data['state'] = 'awaiting_question'
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state = context.user_data.get('state')
    
    if state == 'awaiting_question':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
        is_valid, error_message = is_valid_question(text)
        if not is_valid:
            await update.message.reply_text(f"‚ùå {error_message}")
            return
        
        context.user_data['question'] = text
        context.user_data['state'] = 'awaiting_cards'
        
        await update.message.reply_text(
            f"‚úÖ **–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç:**\n_{text}_\n\n"
            f"üÉè –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ 3 –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üîÆ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã", 
                              web_app=WebAppInfo(url="https://gabanna81.github.io/taro/"))]
            ], resize_keyboard=True),
            parse_mode='Markdown'
        )
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await update.message.reply_text(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é:",
        reply_markup=main_keyboard()
    )

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.callback_query
    tariff_key = query.data
    
    if tariff_key not in TARIFFS:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    tariff = TARIFFS[tariff_key]
    user_id = update.effective_user.id
    
    try:
        payment_url = await create_payment(user_id, tariff_key, tariff)
        if payment_url:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_main")]
            ])
            
            await query.edit_message_text(
                f"üí≥ **–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞**\n\n"
                f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff['price']}‚ÇΩ\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
# ====== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–£–ß–ù–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø ======

def _ensure_user_exists(user_id: int):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ –ë–î ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å"""
    if not get_user(user_id):
        register_user(user_id)

async def _admin_guard(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω"""
    uid = update.effective_user.id if update.effective_user else 0
    if uid != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif update.callback_query:
            await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return False
    return True

async def add_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /add_paid <user_id> <—Å–∫–æ–ª—å–∫–æ>
    –ù–∞—á–∏—Å–ª—è–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç users.paid_requests).
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        assert amount > 0
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_paid <user_id> <—Å–∫–æ–ª—å–∫–æ>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add_paid 123456789 10)")
        return

    _ensure_user_exists(target_id)
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET paid_requests = COALESCE(paid_requests,0) + ? WHERE user_id = ?",
            (amount, target_id)
        )
    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")

async def add_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /add_bonus <user_id> <—Å–∫–æ–ª—å–∫–æ>
    –ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è (users.bonus_requests).
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        assert amount > 0
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_bonus <user_id> <—Å–∫–æ–ª—å–∫–æ>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add_bonus 123456789 5)")
        return

    _ensure_user_exists(target_id)
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET bonus_requests = COALESCE(bonus_requests,0) + ? WHERE user_id = ?",
            (amount, target_id)
        )
    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")

async def reset_free(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /reset_free <user_id>
    –û–±–Ω—É–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö (users.request_count=0) ‚Üí —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ MAX_FREE_REQUESTS.
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /reset_free <user_id>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /reset_free 123456789)")
        return

    _ensure_user_exists(target_id)
    with get_db_connection() as conn:
        conn.execute("UPDATE users SET request_count = 0 WHERE user_id = ?", (target_id,))
    await update.message.reply_text(f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} (—Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ {MAX_FREE_REQUESTS}).")

async def add_sub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /add_sub <user_id> <–¥–Ω–µ–π>
    –í–∫–ª—é—á–∞–µ—Ç/–ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É: users.is_subscribed=1 –∏ –¥–≤–∏–≥–∞–µ—Ç users.subscription_end.
    """
    if not await _admin_guard(update):
        return
    try:
        target_id = int(context.args[0])
        days = int(context.args[1])
        assert days > 0
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_sub <user_id> <–¥–Ω–µ–π>  (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add_sub 123456789 7)")
        return

    _ensure_user_exists(target_id)
    # —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏
    user = get_user(target_id)
    now = datetime.now()
    base = now
    try:
        if user and user['subscription_end']:
            current_end = datetime.strptime(user['subscription_end'], '%Y-%m-%d %H:%M:%S')
            # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–∞
            if current_end > now:
                base = current_end
    except Exception:
        pass

    new_end = base + timedelta(days=days)
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET is_subscribed = 1, subscription_end = ? WHERE user_id = ?",
            (new_end.strftime('%Y-%m-%d %H:%M:%S'), target_id)
        )
    await update.message.reply_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –ø—Ä–æ–¥–ª–µ–Ω–∞/–≤—ã–¥–∞–Ω–∞ –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}."
    )
# ====== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î ======


async def show_sub_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    already = (u['got_secretlovemagic'] if u else 0)
    if already:
        await update.message.reply_text("‚úÖ –ë–æ–Ω—É—Å —É–∂–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è —Ä–∞–Ω–µ–µ.")
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=SUB_CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="check_sub_secretlovemagic")]
    ])
    await update.message.reply_text(
        f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ +{SUB_BONUS_AMOUNT} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π.\n\n"
        f"1) –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª¬ª –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\n"
        f"2) –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)¬ª ‚Äî –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –Ω–∞—á–∏—Å–ª–∏—Ç –±–æ–Ω—É—Å.",
        reply_markup=kb
    )


async def is_user_subscribed_to_channel(bot, user_id: int) -> bool | None:
    """
    True ‚Äî –ø–æ–¥–ø–∏—Å–∞–Ω, False ‚Äî –Ω–µ—Ç, None ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).
    –í–ê–ñ–ù–û: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @SecretLoveMagic.
    """
    chat_ref = f"@{SUB_CHANNEL_USERNAME}"
    try:
        member = await bot.get_chat_member(chat_id=chat_ref, user_id=user_id)
        return getattr(member, "status", "left") in ("member", "administrator", "creator")
    except Exception as e:
        logger.error(f"get_chat_member failed for {chat_ref}, user {user_id}: {e}")
        return None

async def check_sub_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞"""
    query = update.callback_query
    user_id = update.effective_user.id

    u = get_user(user_id)
    if u and (u['got_secretlovemagic'] or 0) == 1:
        await query.answer("–ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª—ë–Ω —Ä–∞–Ω–µ–µ.", show_alert=True)
        return

    status = await is_user_subscribed_to_channel(context.bot, user_id)
    if status is None:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.", show_alert=True)
        return
    if not status:
        await query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        return

    # –ø–æ–¥–ø–∏—Å–∞–Ω ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    with get_db_connection() as conn:
        conn.execute(
            "UPDATE users SET bonus_requests = COALESCE(bonus_requests,0) + ?, got_secretlovemagic = 1 WHERE user_id = ?",
            (SUB_BONUS_AMOUNT, user_id)
        )

    await query.edit_message_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞—á–∏—Å–ª–µ–Ω–æ +{SUB_BONUS_AMOUNT} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π. –°–ø–∞—Å–∏–±–æ!")


async def create_payment(user_id, tariff_key, tariff):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa"""
    try:
        payment_id = str(uuid.uuid4())
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
        price = tariff.get('test_price', tariff['price'])
        
        payment = Payment.create({
            "amount": {
                "value": f"{price:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/tarot247bot"
            },
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}",
            "metadata": {
                'user_id': user_id,
                'tariff': tariff_key
            }
        }, payment_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        conn = sqlite3.connect('botdata.db')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                payment_id TEXT PRIMARY KEY,
                user_id INTEGER,
                tariff TEXT,
                amount REAL,
                status TEXT DEFAULT 'pending',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.execute('''
            INSERT INTO payments (payment_id, user_id, tariff, amount)
            VALUES (?, ?, ?, ?)
        ''', (payment_id, user_id, tariff_key, price))
        conn.commit()
        conn.close()
        
        return payment.confirmation.confirmation_url
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not check_openai_setup():
        print("‚ùå OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY")
        return

    init_db()

    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫ —É —Ç–µ–±—è)
    app.add_handler(CommandHandler("add_paid", add_paid))
    app.add_handler(CommandHandler("add_bonus", add_bonus))
    app.add_handler(CommandHandler("reset_free", reset_free))
    app.add_handler(CommandHandler("add_sub", add_sub))
    app.add_handler(CommandHandler("broadcast", broadcast))

    logger.info("ü§ñ –¢–∞—Ä–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("ü§ñ –¢–∞—Ä–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # === –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –ó–ê–ü–£–°–ö–ê ===
    USE_WEBHOOK = os.getenv("USE_WEBHOOK", "0") == "1"
    if USE_WEBHOOK:
        # –î–ª—è Render (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ —Å –ø—É–±–ª–∏—á–Ω—ã–º URL)
        PORT = int(os.environ.get("PORT", "8080"))
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=f"{PUBLIC_URL}/{TOKEN}",
            drop_pending_updates=True
        )
    else:
        # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
        app.run_polling(drop_pending_updates=True)

    
    
if __name__ == '__main__':
    main()